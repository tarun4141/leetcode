class Solution {
    public int paintWalls(int[] cost, int[] time) {
        // Get the number of walls to be painted
        int n = cost.length;

        // Initialize an array to store the minimum cost for painting 'i' walls
        int dp[] = new int[n+1];

        // Initialize the array with a very large value to ensure we can find the minimum cost
        Arrays.fill(dp, (int)1e9);

        // Set the cost for painting 0 walls to be 0, as there's no cost for no walls.
        dp[0] = 0;

        // Loop through the walls
        for(int i = 0; i < n; ++i){
            // Loop through the number of walls to paint (j) in reverse order (to avoid overwriting values prematurely)
            for(int j = n; j > 0; --j){
                // Calculate the minimum cost for painting 'j' walls by considering the current wall 'i'.
                // We take the minimum of the current cost (dp[j]) and the cost of painting the current wall
                // plus the minimum cost for painting the remaining walls (dp[Math.max(j-time[i]-1, 0)]).
                dp[j] = Math.min(dp[j], dp[Math.max(j - time[i] - 1, 0)] + cost[i]);
            }
        }

        // The final result is the minimum cost of painting all 'n' walls, which is stored in dp[n].
        return dp[n];
    }
}
