class Solution {
    
    public void bfs(int[][] grid, int n , int m , int row, int col, int[][]vis,int[] ans){
        Queue<Pair<Integer,Integer>> q = new LinkedList<>();
        q.add(new Pair(row,col));
        vis[row][col] = 1;

        if(ans[0] > -1) ans[0]++;
        int[] dr = {-1,0,1,0 };
        int[] dc = {0,1,0,-1 };
        
        while(!q.isEmpty()){
            int r = q.peek().getKey();
            int c = q.peek().getValue();
            q.poll();
    
        for(int i = 0; i <4;i++){
            int nr = r + dr[i];
            int nc = c + dc[i];
            if(nr >= 0 && nr < n && nc >= 0 && nc < m &&
                 grid[nr][nc] == 1 && vis[nr][nc] == 0){
                    vis[nr][nc] = 1;
                    if(ans[0] > -1) ans[0]++;
                    q.add(new Pair(nr,nc));
                }    
            }
        }
    }
    
    public int numEnclaves(int[][] grid) {
        int n = grid.length, m = grid[0].length;
        int[][] vis = new int[n][m];
        int i = 0, j =0;
        int[] ans = {-1};

        for(i=0 ; i < m ; i++){
            if(grid[0][i] == 1 && vis[0][i] == 0)
                bfs(grid, n, m, 0, i,vis,ans );
            if(grid[n-1][i] == 1 && vis[n-1][i] == 0)
                bfs(grid, n, m, n-1, i,vis,ans );
        }
        for(i=0 ; i < n ; i++){
            if(grid[i][0] == 1 && vis[i][0] == 0)
                bfs(grid, n, m, i, 0,vis,ans );
            if(grid[i][m-1] == 1 && vis[i][m-1] == 0)
                bfs(grid, n, m, i, m-1 ,vis,ans );
        }
       
        ans[0] = 0;
        for(i = 1 ; i < n-1 ; i++){
            for(j = 1 ; j < m-1 ; j++){
                if(grid[i][j] == 1 && vis[i][j] == 0){
                    bfs(grid,n,m,i,j,vis,ans);
                }
            }
        }
        
        return ans[0];
    }
}
