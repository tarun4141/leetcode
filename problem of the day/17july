/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        int carry = 0;
        ListNode l3 = null;
        while(l1 != null && l2 != null) {
            int sum = l1.val + l2.val + carry;
            if(sum >= 10) {
                carry = 1;
                sum = sum % 10;
            }else {
                carry = 0;
            }
            ListNode temp = new ListNode(sum);
            temp.next = l3;
            l3 = temp;
            l1 = l1.next;
            l2 = l2.next;
        }
        while(l1 != null) {
            int sum = l1.val + carry;
            if(sum >= 10) {
                carry = 1;
                sum = sum %10;
            }else {
                carry = 0;
            }
            ListNode temp = new ListNode(sum);
            temp.next = l3;
            l3 = temp;
            l1 = l1.next;
        }
        while(l2 != null) {
            int sum = l2.val + carry;
            if(sum >= 10) {
                carry = 1;
                sum = sum %10;
            }else {
                carry = 0;
            }
            ListNode temp = new ListNode(sum);
            temp.next = l3;
            l3 = temp;
            l2 = l2.next;
        }
        if(carry != 0) {
            ListNode temp = new ListNode(1);
            temp.next = l3;
            l3 = temp;
        }
        return l3;
    }
    public ListNode reverse(ListNode head) {
        if(head == null || head.next == null) return head;
        ListNode a = null;
        ListNode b = head;
        ListNode c = head.next;
        while(b != null) {
            b.next = a;
            a = b;
            b = c;
            if(c != null) c = c.next;
        }
        return a;
    }
}
