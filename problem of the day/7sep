/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

This is the one approach we commonly use lets take second approah using recursion

// class Solution {
//     public ListNode reverseBetween(ListNode head, int left, int right) {
//         ListNode d=new ListNode(-1);
//         d.next=head;
//         ListNode p=d;
//         for(int i=0;i<left-1;i++){
//             p=p.next;
//         }
//         ListNode c=p.next;
//         ListNode n=c.next;
//         for(int i=0;i<right-left;i++){
//             c.next=n.next;
//             n.next=p.next;
//             p.next=n;
//             n=c.next;
//         }
//         return d.next;
//     }
// }


class Solution{
private ListNode successor = null;

    public ListNode reverseBetween(ListNode head, int left, int right) {
        if (left == 1) {
            return reverseN(head, right);
        }

        head.next = reverseBetween(head.next, left - 1, right - 1);
        return head;
    }

    private ListNode reverseN(ListNode head, int n) {
        if (n == 1) {
            successor = head.next;
            return head;
        }

        ListNode last = reverseN(head.next, n - 1);
        head.next.next = head;
        head.next = successor;
        return last;
    }
}
