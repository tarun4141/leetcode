class Solution{
    class pair{
        int first;
        int second;
        pair(int first,int second)
        {
            this.first=first;
            this.second=second;
        }
    }
    int dfs(int i,int j,int[][] Grid,int[][] dp)
    {
        int n=Grid.length;
        int m=Grid[0].length;
        if(i>=n || j>=m)
        return 0;

        if(dp[i][j]!=-1)
        return dp[i][j];

        if(Grid[i][j]==1)
        return 0;
        

        if(i==n-1 && j==m-1)
        return 1;

        int left=dfs(i+1,j,Grid,dp);
        int right=dfs(i,j+1,Grid,dp);

        return dp[i][j]=left+right;
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n=obstacleGrid.length;
        int m=obstacleGrid[0].length;
        if(obstacleGrid[n-1][m-1]==1)
        return 0;
        int dp[][]=new int[n][m];
        for(int i[]:dp)
        Arrays.fill(i,-1);
        return dfs(0,0,obstacleGrid,dp);
        
    }
}
