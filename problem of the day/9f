/**
 * The Solution class implements a method to find the largest divisible subset from a given array of integers.
 */
class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        // Create a HashMap to store each number and its corresponding divisible subset.
        HashMap<Integer , List<Integer>> hm = new HashMap<>();
         
        // Sort the input array in ascending order.
        Arrays.sort(nums);

        // Initialize a list to store the largest divisible subset.
        List<Integer> arr = new ArrayList<>();
        int number = nums[0]; // Initialize the number to the first element in nums.
        int length = 1; // Initialize the length of the largest divisible subset to 1.
    
        arr.add(nums[0]); // Add the first element of nums to the list.

        hm.put(nums[0] , arr); // Store the first element and its corresponding divisible subset in the HashMap.

        // Iterate through the elements of nums starting from the second element.
        for (int i = 1; i < nums.length; i++) {
             int maxLen = 0; // Initialize the maximum length of divisible subset found so far to 0.
             int idx = -1; // Initialize the index of the number which forms the largest divisible subset with the current element to -1.
             int j = i - 1; // Initialize j to i-1 to check for possible divisors in the previous elements.

             // Iterate through the previous elements of nums to find the largest divisible subset.
             while (j >= 0) {
                if (nums[i] % nums[j] == 0 && hm.get(nums[j]).size() > maxLen) {
                    // If nums[i] is divisible by nums[j] and nums[j] has a larger divisible subset than current maxLen,
                    // update maxLen and idx.
                    maxLen = hm.get(nums[j]).size();
                    idx = j;
                }
                j--;
             }
         
            // If no divisor is found for nums[i], create a new divisible subset with nums[i].
            if (idx < 0) {
                List<Integer> temp = new ArrayList<>();
                temp.add(nums[i]);
                hm.put(nums[i] , temp); // Store nums[i] and its divisible subset in the HashMap.
            } else {
                // If a divisor is found for nums[i], create a new divisible subset by adding nums[i] to the divisible subset of nums[idx].
                List<Integer> temp1 = new ArrayList<>(hm.get(nums[idx]));
                temp1.add(nums[i]);  
                
                // Update length and number if the new divisible subset's length is greater than or equal to the current largest divisible subset.
                if (temp1.size() >= length) {
                    length = temp1.size();
                    number = nums[i];
                }  
                hm.put(nums[i], temp1); // Store nums[i] and its divisible subset in the HashMap.
            }     
        }
        return hm.get(number); // Return the largest divisible subset found.
    }
}
