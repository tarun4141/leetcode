class Solution {
    public int[] kWeakestRows(int[][] mat, int k) {
        int m = mat.length;
        int n = mat[0].length;
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>(new Comparator<int[]>(){
            public int compare(int[] a, int[] b){
                if(a[0]==b[0]) return a[1]-b[1];
                return a[0]-b[0];
            }
        });

        for(int i=0; i<m; i++){
            pq.add(new int[]{strength(mat[i],0,n-1), i});
        }
        int[] ans = new int[k];
        for(int i=0; i<k; i++){
            ans[i] = pq.poll()[1];
        }
        return ans;
    }

    int strength(int[] arr, int l, int r){
        int idx=-1;
        while(l<=r){
            int mid = l+(r-l)/2;
            if(arr[mid]==1){
                idx = mid;
                l = mid+1;
            } else r = mid-1;
        }

        return idx+1;

    }
}
