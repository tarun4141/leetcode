class Solution {
    public int countPalindromicSubsequence(String s) {
        Map<Character,List<Integer>> map = new HashMap<>();
        int result = 0;
        for(char c='a';c<='z';c++){
            map.put(c,new ArrayList<>());
        }
        for(int i=0;i<s.length();i++){
            map.get(s.charAt(i)).add(i);
        }
        for(char c='a';c<='z';c++){
            List<Integer> indices = map.get(c);
            if(indices.size()>1){
                int left = indices.get(0);
                int right = indices.get(indices.size()-1);
                if(right-left<2)continue;
                else{
                    int minusCount = getMinusCount(map, left, right);
                    result+=right-left-1-minusCount;
                }
            }
        }
        return result;
    }

    int getMinusCount(Map<Character,List<Integer>> map,int left,int right){
        int result = 0;
        for(char c = 'a'; c<='z';c++){
            List<Integer> indices = map.get(c);
            int count = 0;
            if(indices.size()<2)continue;
            for(int i=0;i<indices.size();i++){
                int index = indices.get(i);
                if(index>=right)break;
                else if(index>left && index<right)count++;
            }
            if(count>1) result+=count-1;
        }
        return result;
    }
}
