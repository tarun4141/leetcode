/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode[] splitListToParts(ListNode head, int k) {
        ListNode temp = head;
        int totalCount = 0;
        while(temp != null){
            totalCount++;
            temp = temp.next;
        }
        temp = head;
        int partsLength = totalCount / k;
        ListNode[] output = new ListNode[k];
        Arrays.fill(output, null);
        int index = 0;
        while(temp != null && totalCount > 0){
            if(totalCount %  k  == 0){
                output[index++] = temp;
                for(int i = 0; i < partsLength - 1 && temp != null; i++){
                    temp = temp.next;
                }
                if(temp != null){
                    ListNode temp1= temp.next;
                    temp.next = null;
                    temp = temp1;
                }
                totalCount -= partsLength;
            }
            else{
                output[index++] = temp;
                for(int i = 0; i < partsLength && temp != null; i++){
                    temp = temp.next;
                }
                if(temp != null){
                    ListNode temp1= temp.next;
                    temp.next = null;
                    temp = temp1;
                }
                totalCount -= (partsLength + 1);
            }
            k--;
        }

        return output;
    }
}
