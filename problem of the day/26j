class Solution {
    int mod=(int)1e9+7;
    public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        long dp[][][]=new long[m][n][maxMove+1];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                Arrays.fill(dp[i][j], -1);
            }
        }
        return (int)solve(m,n,maxMove,startRow,startColumn,dp);
    }
    public long solve(int m,int n,int maxMove,int i,int j,long dp[][][])
    {
        if(i<0 || j<0 || i>=m || j>=n)
        return 1;
        if(maxMove==0)
        return 0;
        if(dp[i][j][maxMove]!=-1)
        return dp[i][j][maxMove];
        long ans=(solve(m,n,maxMove-1,i-1,j,dp)%mod+solve(m,n,maxMove-1,i+1,j,dp)%mod+solve(m,n,maxMove-1,i,j-1,dp)%mod+solve(m,n,maxMove-1,i,j+1,dp)%mod)%mod;
        return dp[i][j][maxMove]=ans;
    }
}
