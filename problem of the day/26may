class Solution {
    public int stoneGameII(int[] piles) {
        int n = piles.length;
        int[] suffixSum = new int[n];
        suffixSum[n - 1] = piles[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            suffixSum[i] = suffixSum[i + 1] + piles[i];
        }
        int[][] memo = new int[n][n];
        return dfs(piles, suffixSum, memo, 0, 1);
    }
    
    private int dfs(int[] piles, int[] suffixSum, int[][] memo, int i, int M) {
        if (i == piles.length) {
            return 0;
        }
        if (2 * M >= piles.length - i) {
            return suffixSum[i];
        }
        if (memo[i][M] != 0) {
            return memo[i][M];
        }
        int min = Integer.MAX_VALUE;
        for (int x = 1; x <= 2 * M; x++) {
            min = Math.min(min, dfs(piles, suffixSum, memo, i + x, Math.max(M, x)));
        }
        int res = suffixSum[i] - min;
        memo[i][M] = res;
        return res;
    }
}
