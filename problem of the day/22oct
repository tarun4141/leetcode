import java.util.Stack;

class Solution {
    public int maximumScore(int[] nums, int k) {
        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        Stack<Integer> stack = new Stack<>();

        // Calculate the left array using a monotonic stack
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && nums[stack.peek()] >= nums[i]) {
                stack.pop();
            }
            left[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }

        stack.clear();

        // Calculate the right array using a monotonic stack
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && nums[stack.peek()] >= nums[i]) {
                stack.pop();
            }
            right[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }

        int maxScore = 0;

        for (int i = 0; i < n; i++) {
            if (left[i] < k && right[i] > k) {
                int width = right[i] - left[i] - 1;
                int height = nums[i];
                maxScore = Math.max(maxScore, width * height);
            }
        }

        return maxScore;
    }
}
